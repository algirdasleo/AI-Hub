name: CI CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: 20
  CLIENT_SERVICE: ai-hub-client
  SERVER_SERVICE: ai-hub-server
  GCP_REGION: europe-west1
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REPO_NAME: ai-hub
  SERVER_PORT: 3001
  CLIENT_PORT: 3000

jobs:
  build-test:
    name: Build & Test Monorepo
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install workspace dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      - name: Start Redis
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-server
          sudo systemctl start redis-server
          redis-cli ping

      - name: Setup test environment files
        run: |
          # Setup server env
          cat > server/.env << EOF
          SUPABASE_SECRET_KEY=${{ secrets.SUPABASE_SECRET_KEY }}
          SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          SUPABASE_JWT_SECRET=${{ secrets.SUPABASE_JWT_SECRET }}
          NEXT_PUBLIC_URL=http://localhost:3000
          GOOGLE_GENERATIVE_AI_API_KEY=${{ secrets.GOOGLE_GENERATIVE_AI_API_KEY }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
          REDIS_URL=redis://localhost:6379
          JOB_TTL_SECONDS=600
          EOF

          # Setup client env
          cat > client/.env.local << EOF
          NEXT_PUBLIC_SERVER_URL=http://localhost:3001
          NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY=${{ secrets.SUPABASE_PUBLISHABLE_KEY }}
          EOF

          # Setup e2e test env
          cat > client/e2e/.env << EOF
          BASE_URL=http://localhost:3000
          API_URL=http://localhost:3001
          TEST_USER_EMAIL=${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD=${{ secrets.TEST_USER_PASSWORD }}
          EOF

      - name: Lint
        run: npm run lint --if-present

      # - name: Test
      #   run: npm test --if-present --workspaces
      #   env:
      #     CI: true

      - name: Build all
        run: npm run build --if-present

      - name: Upload build artifacts (client .next + server dist)
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            client/.next
            client/package.json
            server/dist
            server/package.json
            shared
            tsconfig.base.json

  deploy:
    name: Deploy to Cloud Run
    needs: build-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Authenticate to Google Cloud (OIDC)
        id: auth
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Set up gcloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure gcloud defaults
        run: |
          gcloud config set project $PROJECT_ID
          gcloud config set run/region $GCP_REGION

      - name: Build & push server image
        run: |
          gcloud builds submit \
            --tag gcr.io/$PROJECT_ID/${{ env.SERVER_SERVICE }} \
            -f server/Dockerfile .

      - name: Deploy server to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVER_SERVICE }} \
            --image gcr.io/$PROJECT_ID/${{ env.SERVER_SERVICE }} \
            --platform managed \
            --port $SERVER_PORT \
            --allow-unauthenticated

      - name: Build & push client image
        run: |
          gcloud builds submit \
            --tag gcr.io/$PROJECT_ID/${{ env.CLIENT_SERVICE }} \
            -f client/Dockerfile .

      - name: Deploy client to Cloud Run
        run: |
          gcloud run deploy ${{ env.CLIENT_SERVICE }} \
            --image gcr.io/$PROJECT_ID/${{ env.CLIENT_SERVICE }} \
            --platform managed \
            --port $CLIENT_PORT \
            --allow-unauthenticated

      - name: Output service URLs
        run: |
          echo "Server URL: $(gcloud run services describe $SERVER_SERVICE --format 'value(status.url)')"
          echo "Client URL: $(gcloud run services describe $CLIENT_SERVICE --format 'value(status.url)')"
